{"version":3,"sources":["ContactList/ContactList.module.css","ContactForm/ContactForm.module.css","CSSTransitions/slide.module.css","Notification/Notification.module.css","CSSTransitions/slideLogo.module.css","CSSTransitions/pop.module.css","ContactForm/ContactForm.jsx","Filter/Filter.jsx","ContactList/ContactList.jsx","Logo/Logo.jsx","Notification/Notification.jsx","App/App.jsx","index.js"],"names":["module","exports","ContactForm","state","name","number","clearInput","e","target","value","inputHandler","setState","addButtonHandler","preventDefault","props","onAddButton","className","styles","input","type","placeholder","onChange","this","onClick","pattern","Component","Filter","filterHandler","defaultProps","ContactList","contactsList","deleteHandler","TransitionGroup","component","list","map","id","CSSTransition","key","timeout","unmountOnExit","classNames","slideTransition","button","Logo","Notification","container","App","contacts","filter","didMount","contactExists","addContact","contact","newContact","uuidv4","some","includes","prevState","setTimeout","filterUpdater","length","toLowerCase","deleteButtonHandler","savedUsers","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","listArray","in","LogoSlideTransition","appear","PopTransition","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e90b27b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__1Pt1J\",\"list\":\"ContactList_list__1X-F_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__itE8_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1Ue50\",\"enterActive\":\"slide_enterActive__33DeL\",\"exit\":\"slide_exit__3H4Qt\",\"exitActive\":\"slide_exitActive__18Xe2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__2ViKQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideLogo_enter__2igT4\",\"enterActive\":\"slideLogo_enterActive__2Coow\",\"exit\":\"slideLogo_exit__2g-Bn\",\"exitActive\":\"slideLogo_exitActive__1lU1j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__3v1dl\",\"enterActive\":\"pop_enterActive__2hv-L\",\"exit\":\"pop_exit__2upp1\",\"exitActive\":\"pop_exitActive__2QiwF\"};","import React, { Component } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ContactForm extends Component {\r\n  static defaultProps = {\r\n    onAddButton: () => {\r\n      return;\r\n    },\r\n  };\r\n\r\n  static propTypes = {\r\n    onAddButton: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  clearInput = (e) => {\r\n    e.target.value = \"\";\r\n  };\r\n\r\n  inputHandler = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  addButtonHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.onAddButton({ ...this.state });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className={styles.input}>\r\n          <p>Name</p>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Input name\"\r\n            name=\"name\"\r\n            onChange={this.inputHandler}\r\n            onClick={this.clearInput}\r\n          />\r\n          <p>Phone</p>\r\n          <input\r\n            type=\"tel\"\r\n            placeholder=\"Input number\"\r\n            name=\"number\"\r\n            pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\r\n            onChange={this.inputHandler}\r\n            onClick={this.clearInput}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"button\"\r\n          type=\"submit\"\r\n          onClick={this.addButtonHandler}\r\n        >\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default function Filter({ filterHandler }) {\r\n  return (\r\n    <>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Input name\"\r\n        name=\"filter\"\r\n        onChange={filterHandler}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.defaultProps = {\r\n  filterHandler: () => {\r\n    return;\r\n  },\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterHandler: PropTypes.func.isRequired,\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport slideTransition from \"../CSSTransitions/slide.module.css\";\r\n\r\nexport default function ContactList({ contactsList, deleteHandler }) {\r\n  return (\r\n\r\n    <TransitionGroup component=\"ul\" className={styles.list}>\r\n      {contactsList.map(({ id, name, number }) => (\r\n        <CSSTransition\r\n          key={id}\r\n          timeout={250}\r\n          unmountOnExit\r\n          classNames={slideTransition}\r\n        >\r\n          <li key={id}>\r\n            <button\r\n              className={styles.button}\r\n              type=\"button\"\r\n              onClick={() => deleteHandler(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n            {name}: {number}\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n}\r\n\r\nContactList.defaultProps = {\r\n  contactsList: [],\r\n  deleteHandler: () => {\r\n    return;\r\n  },\r\n};\r\n\r\nContactList.propTypes = {\r\n  contactsList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Logo() {\r\n  return <h1>Phonebook</h1>;\r\n}\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nexport default function Notification() {\r\n    return (\r\n        <div className={styles.container}>\r\n            <p>Contact already exists!</p>\r\n        </div>\r\n    )\r\n}","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Filter/Filter\";\nimport ContactList from \"../ContactList/ContactList\";\n\nimport Logo from \"../Logo/Logo\";\nimport Notification from \"../Notification/Notification\";\n\nimport LogoSlideTransition from \"../CSSTransitions/slideLogo.module.css\";\nimport PopTransition from \"../CSSTransitions/pop.module.css\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    didMount: false,\n    contactExists: false,\n  };\n\n  componentDidMount() {\n    this.setState({ didMount: true });\n\n    const savedUsers = localStorage.getItem(\"contacts\");\n\n    if (savedUsers) {\n      this.setState({\n        contacts: JSON.parse(savedUsers),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (contact) => {\n    const newContact = {\n      ...contact,\n      id: uuidv4(),\n    };\n\n    const { contacts } = this.state;\n\n    const isInContacts = contacts.some((contact) =>\n      contact.name.includes(newContact.name)\n    );\n\n    isInContacts\n      ? this.setState(\n          (prevState) => ({\n            contactExists: !prevState.contactExists,\n          }),\n          () =>\n            setTimeout(() => {\n              this.setState((prevState) => ({\n                contactExists: !prevState.contactExists,\n              }));\n            }, 1000)\n        )\n      : this.setState((prevState) => {\n          const { contacts } = prevState;\n\n          const newContactsArr = [...contacts, newContact];\n\n          return { contacts: newContactsArr };\n        });\n  };\n\n  filterHandler = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      filter: value,\n    });\n\n    this.filterUpdater();\n  };\n\n  filterUpdater = () => {\n    const { filter, contacts } = this.state;\n\n    if (filter.length === 0) {\n      return;\n    }\n    const filteredArray = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return filteredArray;\n  };\n\n  deleteButtonHandler = (id) => {\n    this.setState((prevState) => {\n      const { contacts } = prevState;\n\n      const newContactsArr = contacts.filter((contact) => contact.id !== id);\n\n      return { contacts: newContactsArr };\n    });\n  };\n\n  render() {\n    const { contacts, filter, didMount, contactExists } = this.state;\n\n    const listArray = filter.length === 0 ? contacts : this.filterUpdater();\n\n    return (\n      <>\n        <div className=\"App\">\n          <CSSTransition\n            in={didMount}\n            timeout={500}\n            classNames={LogoSlideTransition}\n            appear\n          >\n            <Logo />\n          </CSSTransition>\n\n          <ContactForm onAddButton={this.addContact} />\n\n          <h2 className=\"contactsTitle\">Contacts</h2>\n\n          <Filter filterHandler={this.filterHandler} />\n          <ContactList\n            contactsList={listArray}\n            deleteHandler={this.deleteButtonHandler}\n          />\n        </div>\n\n        <CSSTransition\n          in={contactExists}\n          timeout={250}\n          unmountOnExit\n          classNames={PopTransition}\n        >\n          <Notification />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}